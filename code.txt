Html:
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>RetroConnect - Chat UI</title>
  <meta name="viewport" content="width=device-width,initial-scale=1">
  <style>
/* ... (all your existing CSS remains unchanged EXCEPT remove #friendsMenu styling, which is no longer used) ... */
:root {
  --bg: #222;
  --fg: #fff;
  --accent: #3498db;
  --window-bg: #333;
  --header-bg: #444;
  --border: #555;
  --input-bg: #222;
  --input-fg: #fff;
  --button-bg: #444;
  --button-fg: #fff;
  --high-contrast-bg: #000;
  --high-contrast-fg: #fff;
}
/* ... (rest of CSS is the same as previously, but REMOVE the #friendsMenu, #friendsTitle, #friendsList, .friendItem, etc.) ... */
.window {
  position: absolute;
  width: 320px;
  min-height: 220px;
  box-sizing: border-box;
  border-radius: 7px;
  z-index: 10;
  top: 80px; left: 80px;
  box-shadow: 0 4px 24px rgba(0,0,0,0.3);
  transition: box-shadow 0.2s;
}
.window-header {
  cursor: move;
  padding: 8px 12px;
  font-weight: bold;
  display: flex;
  justify-content: space-between;
  align-items: center;
  user-select: none;
}
.window-content {
  padding: 12px;
}
/* ... (rest of CSS unchanged) ... */
  </style>
</head>
<body class="dark">
  <div id="layout">
    <!-- Windows -->
    <div id="windows-root">
      <!-- Chat Window -->
      <div class="window draggable" id="chat-window" style="left:240px;top:60px;">
        <div class="window-header" id="chat-header">
          Chat
          <button class="close-btn" onclick="closeWindow('chat-window')">&times;</button>
        </div>
        <div class="window-content">
          <div id="chat-messages"></div>
          <div class="typing-indicator" id="typing-indicator" style="display:none;">Someone is typing...</div>
          <div class="chat-input-bar">
            <button id="emoji-btn">😊</button>
            <input id="chat-input" placeholder="Type a message..." autocomplete="off"/>
            <button id="send-btn">Send</button>
          </div>
          <div class="emoji-picker" id="emoji-picker">
            <span>😀</span><span>😁</span><span>😂</span><span>😅</span><span>😊</span><span>😍</span>
            <span>😎</span><span>😢</span><span>😡</span><span>👍</span><span>🎉</span><span>❤️</span>
            <span>🔥</span><span>😇</span>
          </div>
        </div>
      </div>
      <!-- Theme Window -->
      <div class="window draggable" id="theme-window" style="left:600px;top:60px;">
        <div class="window-header" id="theme-header">
          Themes
          <button class="close-btn" onclick="closeWindow('theme-window')">&times;</button>
        </div>
        <div class="window-content">
          <form class="theme-list" id="theme-form">
            <label><input type="radio" name="theme" value="dark" checked> Dark Mode</label>
            <label><input type="radio" name="theme" value="win95"> Classic Windows 95</label>
            <label><input type="radio" name="theme" value="cyberpunk"> Cyberpunk Neon</label>
            <label><input type="radio" name="theme" value="light"> Minimalist Light</label>
            <label><input type="radio" name="theme" value="high-contrast"> High Contrast</label>
            <label><input type="radio" name="theme" value="custom"> Custom Color
              <input type="color" id="custom-color" value="#3498db">
            </label>
          </form>
        </div>
      </div>
      <!-- Auth/Login Window -->
      <div class="window draggable" id="auth-window" style="left:920px;top:60px;">
        <div class="window-header" id="auth-header">
          Login
          <button class="close-btn" onclick="closeWindow('auth-window')">&times;</button>
        </div>
        <div class="window-content">
          <button class="login-btn">Login with Google</button>
          <button class="login-btn">Login with Email</button>
        </div>
      </div>
      <!-- Friends Window -->
      <div class="window draggable hidden" id="friends-window" style="left:430px;top:200px;">
        <div class="window-header" id="friends-header">
          Friends
          <button class="close-btn" onclick="closeWindow('friends-window')">&times;</button>
        </div>
        <div class="window-content" id="friends-window-content">
          <div style="margin-bottom:8px;">
            <b>Friend List:</b>
          </div>
          <div id="friendsListWindow"></div>
        </div>
      </div>
      <!-- Start Menu -->
      <div class="window hidden" id="start-menu">
        <div class="window-header"></div>
        <div class="window-content">
          <button onclick="openWindow('chat-window')">Open Chat</button>
          <button onclick="openWindow('theme-window')">Themes</button>
          <button onclick="openWindow('friends-window')">Friends</button>
          <button onclick="openWindow('auth-window')">Login</button>
        </div>
      </div>
    </div>
  </div>
  <!-- Taskbar -->
  <div id="taskbar">
    <button id="start-btn">Start</button>
    <div id="taskbar-items" style="margin-left: 12px;"></div>
    <span id="taskbar-notif"></span>
    <span id="taskbar-time"></span>
  </div>
  <script>
///// FRIENDS WINDOW /////
const FRIENDS = ["alice", "bob", "carol", "dave"];
let selectedFriend = null;
function renderFriendsWindow() {
  const friendsList = document.getElementById('friendsListWindow');
  friendsList.innerHTML = "";
  // Group chat
  const group = document.createElement('div');
  group.textContent = "🌐 Group Chat";
  group.className = "friendItem" + (selectedFriend === null ? " selected" : "");
  group.onclick = function() { selectFriend(null); };
  friendsList.appendChild(group);
  // Friends
  FRIENDS.forEach(friend => {
    const item = document.createElement('div');
    item.textContent = "👤 " + friend;
    item.className = "friendItem" + (selectedFriend === friend ? " selected" : "");
    item.onclick = function() { selectFriend(friend); };
    friendsList.appendChild(item);
  });
}
function selectFriend(friend) {
  selectedFriend = friend;
  renderFriendsWindow();
  // For demo: show notification in chat
  if (friend) {
    showTaskbarNotif(`Switched to chat with ${friend}`);
    addMessage(`Switched to chat with ${friend}`, "System");
  } else {
    showTaskbarNotif("Switched to group chat");
    addMessage("Switched to group chat", "System");
  }
}
renderFriendsWindow();


///// DRAGGABLE WINDOWS /////
let currentDrag = null, offsetX = 0, offsetY = 0;
document.querySelectorAll('.draggable').forEach(win => {
  const header = win.querySelector('.window-header');
  header.addEventListener('mousedown', e => {
    currentDrag = win;
    offsetX = e.clientX - win.offsetLeft;
    offsetY = e.clientY - win.offsetTop;
    win.style.zIndex = 200;
  });
});
window.addEventListener('mousemove', e => {
  if (!currentDrag) return;
  currentDrag.style.left = (e.clientX - offsetX) + 'px';
  currentDrag.style.top = (e.clientY - offsetY) + 'px';
});
window.addEventListener('mouseup', () => { currentDrag = null; });


///// WINDOW MANAGEMENT /////
const windowIds = ['chat-window', 'theme-window', 'auth-window', 'friends-window'];
let openWindows = ['chat-window','theme-window','auth-window'];
function openWindow(id) {
  if (id !== 'start-menu') {
    const win = document.getElementById(id);
    win.classList.remove('hidden');
    // Only add if not already open
    if (!openWindows.includes(id)) {
      // Find a non-overlapping position
      let pos = 60 + openWindows.length * 32;
      win.style.left = pos + 'px';
      win.style.top = pos + 'px';
      win.style.zIndex = 100 + openWindows.length;
      openWindows.push(id);
      if(id === "friends-window") renderFriendsWindow();
    }
    refreshTaskbar();
    // Hide start menu if open
    startMenu.classList.add('hidden');
    startBtn.classList.remove('active');
  }
}
function closeWindow(id) {
  document.getElementById(id).classList.add('hidden');
  openWindows = openWindows.filter(w => w !== id);
  refreshTaskbar();
}
function refreshTaskbar() {
  const bar = document.getElementById('taskbar-items');
  bar.innerHTML = '';
  openWindows.forEach(id => {
    let label = id.replace('-window', '').replace('-', ' ').replace(/\b\w/g, l => l.toUpperCase());
    bar.innerHTML += `<span onclick="openWindow('${id}')">${label}</span>`;
  });
}
refreshTaskbar();


///// START MENU /////
const startBtn = document.getElementById('start-btn');
const startMenu = document.getElementById('start-menu');
startBtn.onclick = (e) => {
  e.stopPropagation();
  const isOpen = !startMenu.classList.contains('hidden');
  if (isOpen) {
    startMenu.classList.add('hidden');
    startBtn.classList.remove('active');
  } else {
    startMenu.classList.remove('hidden');
    startBtn.classList.add('active');
  }
};
document.body.addEventListener('click', e => {
  // Close start menu if clicking outside
  if (!startMenu.contains(e.target) && e.target !== startBtn) {
    startMenu.classList.add('hidden');
    startBtn.classList.remove('active');
  }
});
///// THEME SWITCHER /////
function setTheme(name) {
  document.body.className = name;
  if (name === 'custom') {
    document.body.style.setProperty('--bg', customColor.value);
    document.body.style.setProperty('--accent', customColor.value);
  } else {
    document.body.style = '';
  }
}
const radios = document.querySelectorAll('input[name="theme"]');
const customColor = document.getElementById('custom-color');
radios.forEach(radio => radio.onchange = () => setTheme(radio.value));
customColor.oninput = () => setTheme('custom');


///// TASKBAR LIVE CLOCK /////
function updateClock() {
  const now = new Date();
  let hh = now.getHours().toString().padStart(2, '0');
  let mm = now.getMinutes().toString().padStart(2, '0');
  let ss = now.getSeconds().toString().padStart(2, '0');
  document.getElementById('taskbar-time').textContent = `${hh}:${mm}:${ss}`;
  setTimeout(updateClock, 1000);
}
updateClock();


///// TASKBAR NOTIFICATIONS /////
let notifTimer = null;
function showTaskbarNotif(msg, timeout=5000) {
  const notif = document.getElementById('taskbar-notif');
  notif.textContent = msg;
  if (notifTimer) clearTimeout(notifTimer);
  notifTimer = setTimeout(() => { notif.textContent = ''; }, timeout);
}


///// CHAT LOGIC, SPAM PREVENTION, EMOJI PICKER /////
const chatMessages = document.getElementById('chat-messages');
const chatInput = document.getElementById('chat-input');
const sendBtn = document.getElementById('send-btn');
let spamTimeout = null;
let spamQueue = [];
const SPAM_MAX_QUEUE = 20;
const SPAM_QUEUE_WINDOW_MS = 60 * 1000;
const SPAM_BLOCK_TIME_MS = 60 * 1000;
function setInputDisabled(disabled, msg) {
  sendBtn.disabled = disabled;
  chatInput.disabled = disabled;
  chatInput.placeholder = disabled ? msg : "Type a message...";
  if (!disabled) chatInput.placeholder = "Type a message...";
}
function checkSpamQueue() {
  const now = Date.now();
  spamQueue = spamQueue.filter(ts => now - ts < SPAM_QUEUE_WINDOW_MS);
  return spamQueue.length;
}
function addMessage(text, user = "You") {
  const div = document.createElement('div');
  div.innerHTML = `<b>${escapeHtml(user)}:</b> ${escapeHtml(text)}`;
  chatMessages.appendChild(div);
  chatMessages.scrollTop = chatMessages.scrollHeight;
  // Show notification if window is not focused and message is from someone else
  if (!windowHasFocus && user !== "You" && user !== "System") {
    showTaskbarNotif(`New message from ${user}`);
    notifyBrowser(`New message from ${user}: ${text}`);
  }
}
sendBtn.onclick = () => {
  const now = Date.now();
  const txt = chatInput.value.trim();
  if (txt === "") return;
  // --- Advanced spam prevention ---
  spamQueue.push(now);
  const msgCount = checkSpamQueue();
  if (msgCount > SPAM_MAX_QUEUE) {
    setInputDisabled(true, "Spam detected! Wait 1 min...");
    spamTimeout = setTimeout(() => {
      setInputDisabled(false);
      checkSpamQueue();
    }, SPAM_BLOCK_TIME_MS);
    return;
  }
  // Passed spam checks
  addMessage(txt);
  chatInput.value = '';
  showTyping();
  setTimeout(() => addMessage("Hello from the bot! (stub)", "Bot"), 700);
};
chatInput.onkeydown = e => {
  if (e.key === 'Enter') sendBtn.click();
  else showTyping();
};
function escapeHtml(str) {
  return str.replace(/[&<>"']/g, s => ({
    '&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'
  }[s]));
}
///// TYPING INDICATOR /////
function showTyping() {
  const ti = document.getElementById('typing-indicator');
  ti.style.display = 'block';
  clearTimeout(ti._timer);
  ti._timer = setTimeout(() => ti.style.display = 'none', 1200);
}
///// EMOJI PICKER /////
const emojiBtn = document.getElementById('emoji-btn');
const emojiPicker = document.getElementById('emoji-picker');
emojiBtn.onclick = (e) => {
  e.stopPropagation();
  emojiPicker.style.display = emojiPicker.style.display === 'block' ? 'none' : 'block';
};
emojiPicker.querySelectorAll('span').forEach(span => {
  span.onclick = () => {
    chatInput.value += span.textContent;
    emojiPicker.style.display = 'none';
    chatInput.focus();
  };
});
document.body.onclick = e => {
  if (!emojiPicker.contains(e.target) && e.target !== emojiBtn) emojiPicker.style.display = 'none';
};
emojiPicker.onclick = e => e.stopPropagation();


///// NOTIFICATIONS /////
let windowHasFocus = true;
window.addEventListener('focus', () => {
  windowHasFocus = true;
  document.getElementById('taskbar-notif').textContent = '';
});
window.addEventListener('blur', () => {
  windowHasFocus = false;
});
if (window.Notification && Notification.permission !== "granted") {
  Notification.requestPermission();
}
function notifyBrowser(msg) {
  if (window.Notification && Notification.permission === "granted") {
    new Notification(msg);
  }
}
///// INITIAL STATE /////
setTheme('dark');
openWindow('chat-window');
openWindow('theme-window');
openWindow('auth-window');
  </script>
</body>
</html>




Css:
:root {
  --bg: #222;
  --fg: #fff;
  --accent: #3498db;
  --window-bg: #333;
  --header-bg: #444;
  --border: #555;
  --input-bg: #222;
  --input-fg: #fff;
  --button-bg: #444;
  --button-fg: #fff;
  --high-contrast-bg: #000;
  --high-contrast-fg: #fff;
}


/* Dark Mode */
body.dark {
  background: var(--bg);
  color: var(--fg);
}
body.dark .window { background: var(--window-bg); border: 2px solid var(--border);}
body.dark .window-header { background: var(--header-bg); color: var(--fg);}
body.dark input, body.dark .chat-input-bar { background: var(--input-bg); color: var(--input-fg);}
body.dark button { background: var(--button-bg); color: var(--button-fg);}
body.dark .emoji-picker { background: var(--window-bg); }


/* Windows 95 Theme */
body.win95 {
  background: #008080;
  color: #222;
}
body.win95 .window { background: #c0c0c0; border: 2px solid #333;}
body.win95 .window-header { background: #000080; color: #fff;}
body.win95 input, body.win95 .chat-input-bar { background: #fff; color: #222;}
body.win95 button { background: #e0e0e0; color: #222;}
body.win95 .emoji-picker { background: #c0c0c0; }


/* Cyberpunk Neon Theme */
body.cyberpunk {
  background: #12002f;
  color: #0ff;
}
body.cyberpunk .window { background: #1a0033; border: 2px solid #ff00cc;}
body.cyberpunk .window-header { background: #ff00cc; color: #0ff;}
body.cyberpunk input, body.cyberpunk .chat-input-bar { background: #2f004f; color: #0ff;}
body.cyberpunk button { background: #ff00cc; color: #0ff;}
body.cyberpunk .emoji-picker { background: #2f004f; }


/* Minimalist Light Mode */
body.light {
  background: #f7f7f7;
  color: #111;
}
body.light .window { background: #fff; border: 2px solid #ccc;}
body.light .window-header { background: #eee; color: #111;}
body.light input, body.light .chat-input-bar { background: #f7f7f7; color: #111;}
body.light button { background: #f0f0f0; color: #111;}
body.light .emoji-picker { background: #fff; }


/* High Contrast Mode */
body.high-contrast {
  background: var(--high-contrast-bg);
  color: var(--high-contrast-fg);
}
body.high-contrast .window, body.high-contrast .window-header, body.high-contrast .emoji-picker,
body.high-contrast .chat-input-bar, body.high-contrast input, body.high-contrast button {
  background: var(--high-contrast-bg) !important;
  color: var(--high-contrast-fg) !important;
  border: 2px solid #fff !important;
}


/* Windows */
.window {
  position: absolute;
  width: 320px;
  min-height: 220px;
  box-sizing: border-box;
  border-radius: 7px;
  z-index: 10;
  top: 80px; left: 80px;
  box-shadow: 0 4px 24px rgba(0,0,0,0.3);
  transition: box-shadow 0.2s;
}
.window-header {
  cursor: move;
  padding: 8px 12px;
  font-weight: bold;
  display: flex;
  justify-content: space-between;
  align-items: center;
  user-select: none;
}
.window-content {
  padding: 12px;
}
.close-btn {
  border: none;
  font-size: 18px;
  cursor: pointer;
  background: none;
  color: inherit;
}
.hidden { display: none; }
#chat-messages {
  height: 120px;
  overflow-y: auto;
  margin-bottom: 6px;
  background: rgba(0,0,0,0.04);
  padding: 6px;
  border-radius: 6px;
}
.chat-input-bar {
  display: flex;
  gap: 5px;
  align-items: center;
  margin-top: 5px;
}
.chat-input-bar input {
  flex: 1;
  padding: 7px;
  border-radius: 5px;
  border: 1px solid #aaa;
}
#emoji-btn { width: 32px; font-size: 18px; }
#send-btn { padding: 7px 16px; }
.emoji-picker {
  display: none;
  margin-top: 2px;
  padding: 6px;
  border-radius: 6px;
  font-size: 20px;
  cursor: pointer;
  box-shadow: 0 2px 8px rgba(0,0,0,0.12);
}
.emoji-picker span {
  margin: 2px;
  cursor: pointer;
}
.typing-indicator {
  font-size: 14px;
  color: #888;
  margin-bottom: 4px;
  font-style: italic;
}


#taskbar {
  position: fixed;
  left: 0; right: 0; bottom: 0;
  height: 36px;
  background: #222;
  color: #fff;
  display: flex;
  align-items: center;
  padding: 0 12px;
  z-index: 100;
}
#taskbar button { margin-right: 8px; }
#taskbar-items span {
  margin-right: 6px;
  cursor: pointer;
  text-decoration: underline;
}


/* Start Menu Popup Style */
#start-menu {
  position: fixed !important;
  left: 10px !important;
  bottom: 46px !important; /* just above the taskbar */
  width: 200px !important;
  min-height: 140px !important;
  z-index: 150 !important;
  border-radius: 0 0 8px 8px;
  box-shadow: 0 8px 32px rgba(0,0,0,0.2);
  padding: 0;
  cursor: default;
}
#start-menu .window-header {
  display: none;
}
#start-menu .window-content {
  padding: 10px 0 10px 0;
  display: flex;
  flex-direction: column;
  gap: 8px;
  align-items: stretch;
}
#start-btn.active {
  outline: 2px solid var(--accent, #3498db);
}


/* Responsive */
@media (max-width: 600px) {
  .window { width: 98vw; min-width: 0; left: 1vw !important; }
  #start-menu { width: 90vw !important; left: 5vw !important; }
}


Javascript:




// --- Draggable windows ---
let currentDrag = null, offsetX = 0, offsetY = 0;
document.querySelectorAll('.draggable').forEach(win => {
  const header = win.querySelector('.window-header');
  header.addEventListener('mousedown', e => {
    currentDrag = win;
    offsetX = e.clientX - win.offsetLeft;
    offsetY = e.clientY - win.offsetTop;
    win.style.zIndex = 200;
  });
});
window.addEventListener('mousemove', e => {
  if (!currentDrag) return;
  currentDrag.style.left = (e.clientX - offsetX) + 'px';
  currentDrag.style.top = (e.clientY - offsetY) + 'px';
});
window.addEventListener('mouseup', () => { currentDrag = null; });


// --- Window management (no overlaps) ---
const windowIds = ['chat-window', 'theme-window', 'auth-window'];
let openWindows = [];
function openWindow(id) {
  if (id !== 'start-menu') {
    const win = document.getElementById(id);
    win.classList.remove('hidden');
    // Only add if not already open
    if (!openWindows.includes(id)) {
      // Find a non-overlapping position
      let pos = 60 + openWindows.length * 32;
      win.style.left = pos + 'px';
      win.style.top = pos + 'px';
      win.style.zIndex = 100 + openWindows.length;
      openWindows.push(id);
    }
    refreshTaskbar();
    // Hide start menu if open
    startMenu.classList.add('hidden');
    startBtn.classList.remove('active');
  }
}
function closeWindow(id) {
  document.getElementById(id).classList.add('hidden');
  openWindows = openWindows.filter(w => w !== id);
  refreshTaskbar();
}
function refreshTaskbar() {
  const bar = document.getElementById('taskbar-items');
  bar.innerHTML = '';
  openWindows.forEach(id => {
    let label = id.replace('-window', '').replace('-', ' ').replace(/\b\w/g, l => l.toUpperCase());
    bar.innerHTML += `<span onclick="openWindow('${id}')">${label}</span>`;
  });
}


// --- Start Menu Popup ---
const startBtn = document.getElementById('start-btn');
const startMenu = document.getElementById('start-menu');
startBtn.onclick = (e) => {
  e.stopPropagation();
  const isOpen = !startMenu.classList.contains('hidden');
  if (isOpen) {
    startMenu.classList.add('hidden');
    startBtn.classList.remove('active');
  } else {
    startMenu.classList.remove('hidden');
    startBtn.classList.add('active');
  }
};
document.body.addEventListener('click', e => {
  // Close start menu if clicking outside
  if (!startMenu.contains(e.target) && e.target !== startBtn) {
    startMenu.classList.add('hidden');
    startBtn.classList.remove('active');
  }
});


// When clicking a Start Menu item, hide the menu and open window
['chat-window', 'theme-window', 'auth-window'].forEach(id => {
  const btn = document.querySelector(`#start-menu button[onclick*="${id}"]`);
  if (btn) {
    btn.onclick = function() {
      openWindow(id);
      startMenu.classList.add('hidden');
      startBtn.classList.remove('active');
    };
  }
});


// --- Theme switcher ---
const setTheme = name => {
  document.body.className = name;
  if (name === 'custom') {
    document.body.style.setProperty('--bg', customColor.value);
    document.body.style.setProperty('--accent', customColor.value);
  } else {
    document.body.style = '';
  }
};
const radios = document.querySelectorAll('input[name="theme"]');
const customColor = document.getElementById('custom-color');
radios.forEach(radio => radio.onchange = () => setTheme(radio.value));
customColor.oninput = () => setTheme('custom');


// --- Chat logic (in-memory, stub for Firebase) + SPAM PREVENTION: 20 messages per 1 min max ---
const chatMessages = document.getElementById('chat-messages');
const chatInput = document.getElementById('chat-input');
const sendBtn = document.getElementById('send-btn');


// Spam prevention variables
let spamTimeout = null;
let spamQueue = []; // Timestamps of the last N messages
const SPAM_MAX_QUEUE = 20;     // max messages allowed per window
const SPAM_QUEUE_WINDOW_MS = 60 * 1000; // 1 minute
const SPAM_BLOCK_TIME_MS = 60 * 1000;   // Block for 1 minute


function setInputDisabled(disabled, msg) {
  sendBtn.disabled = disabled;
  chatInput.disabled = disabled;
  chatInput.placeholder = disabled ? msg : "Type a message...";
  if (!disabled) chatInput.placeholder = "Type a message...";
}


function addMessage(text, user = "You") {
  const div = document.createElement('div');
  div.textContent = user + ': ' + text;
  chatMessages.appendChild(div);
  chatMessages.scrollTop = chatMessages.scrollHeight;
}


function checkSpamQueue() {
  const now = Date.now();
  // Remove timestamps older than 1 minute
  spamQueue = spamQueue.filter(ts => now - ts < SPAM_QUEUE_WINDOW_MS);
  return spamQueue.length;
}


sendBtn.onclick = () => {
  const now = Date.now();
  const txt = chatInput.value.trim();


  if (txt === "") return;


  // --- Advanced spam prevention ---
  // Check if user sent 20+ messages in 1 minute
  spamQueue.push(now);
  const msgCount = checkSpamQueue();
  if (msgCount > SPAM_MAX_QUEUE) {
    setInputDisabled(true, "Spam detected! Wait 1 min...");
    spamTimeout = setTimeout(() => {
      setInputDisabled(false);
      // Reset queue to only contain any within the last minute after block
      checkSpamQueue();
    }, SPAM_BLOCK_TIME_MS);
    return;
  }


  // Passed spam checks
  addMessage(txt);
  chatInput.value = '';


  // Fake typing indicator for demo
  showTyping();
  setTimeout(() => addMessage("Hello from Firebase! (stub)", "Bot"), 700);
};
chatInput.onkeydown = e => {
  if (e.key === 'Enter') sendBtn.click();
  else showTyping();
};


function showTyping() {
  const ti = document.getElementById('typing-indicator');
  ti.style.display = 'block';
  clearTimeout(ti._timer);
  ti._timer = setTimeout(() => ti.style.display = 'none', 1200);
}


// --- Emoji picker ---
const emojiBtn = document.getElementById('emoji-btn');
const emojiPicker = document.getElementById('emoji-picker');
emojiBtn.onclick = (e) => {
  e.stopPropagation();
  emojiPicker.style.display = emojiPicker.style.display === 'block' ? 'none' : 'block';
};
emojiPicker.querySelectorAll('span').forEach(span => {
  span.onclick = () => {
    chatInput.value += span.textContent;
    emojiPicker.style.display = 'none';
    chatInput.focus();
  };
});
document.body.onclick = e => {
  if (!emojiPicker.contains(e.target) && e.target !== emojiBtn) emojiPicker.style.display = 'none';
};
// Prevent body click from closing on emoji click
emojiPicker.onclick = e => e.stopPropagation();


// --- Auth (stub demo) ---
/* Firebase integration would be added here */


// --- Initial state ---
setTheme('dark');
openWindow('chat-window');
